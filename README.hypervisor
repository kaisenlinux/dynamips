Description of the hypervisor mode
==================================

The hypervisor mode of dynamips allows you to run simultaneously
many virtual router instances, and to simulate ATM, Ethernet
or Frame-Relay networks. 

Available since version 0.2.5.

Running dynamips in hypervisor mode
===================================

dynamips -H [<ip_address>:]<tcp_port>

Managing the hypervisor
=======================

You can connect directly to the TCP control port with telnet, or use
dynagen/dynagui that will pass commands transparently. The second method
is highly recommended.

The command syntax is simple: <module> <function> [arguments...]
For example: "vm start R1" starts virtual instance named "R1".

The modules that are currently defined are given below:

  * hypervisor   : General hypervisor management
  * vm           : General virtual machine (VM) management
  * vm_debug     : General virtual machine (VM) debugging
  * c7200        : Virtual instances of Cisco 7200
  * c3745        : Virtual instances of Cisco 3745
  * c3725        : Virtual instances of Cisco 3725
  * c3600        : Virtual instances of Cisco 3600
  * c2691        : Virtual instances of Cisco 2691
  * c2600        : Virtual instances of Cisco 2600
  * c1700        : Virtual instances of Cisco 1700
  * nio          : Network Input/Output (NIO) descriptors
  * nio_bridge   : NIO bridges (shared media)
  * atmsw        : ATM switches
  * atm_bridge   : ATM bridges
  * frsw         : Frame-Relay switches
  * ethsw        : Ethernet switches
  * object_store : Object store


Hypervisor management module ("hypervisor")
============================================

* "hypervisor version" : Display the version of dynamips.

* "hypervisor module_list" : Display the module list.

* "hypervisor cmd_list <module>" : Display commands recognized by the
  specified module.

* "hypervisor close" : Close the current session.

* "hypervisor stop"  : Destroy all objects and stop hypervisor.

* "hypervisor reset" : Destroy all objects. (used to get an empty 
  configuration)

* "hypervisor working_dir <directory>" : Set the directory to use to store
  files.

* "hypervisor save_config <filename>" : Save the configuration of all objects
  into the specified file.

* "hypervisor parser_test [<a1> [... <a10>]]" : Display up to 10 arguments.
  (since version 0.2.6-RC1)

* "hypervisor tsg_stats" : Dump statistics about JIT code sharing to 
  the console. (since version 0.2.8-RC3, unstable)

Virtual Machine module ("vm")
=============================

* "vm list" : List all VM instances.
  (c7200, c3745, c3725, c3600, c2691, c2600, c1700)

* "vm list_con_ports" : List all VM console TCP port.
  (since version 0.2.6-RC5)

* "vm create <instance_name> <instance_id> <platform>" : 
  Create a new router instance.
  The ID must be unique and is used to name files on disk.
  (since version 0.2.8-RC1)

* "vm rename <instance_name> <new_name>" : Rename a router instance.
  (since version 0.2.11)

* "vm delete <instance_name>" : Delete the specified instance.
  (since version 0.2.8-RC1)

* "vm clean_delete <instance_name>" : Delete the specified instance and all 
  the related files (best effort). (since version 0.2.11)

* "vm start <instance_name>" : Start the instance. 
  At least the IOS image must be set.
  (since version 0.2.8-RC1)

* "vm stop <instance_name>" : Stop the instance. The settings are kept.
  (since version 0.2.8-RC1)

* "vm get_status <instance_name>" : Get the status of a VM instance.
  Return values: 0=inactive, 1=shutting down, 2=running, 3=suspended.
  (since version 0.2.11)

* "vm set_tsg <instance_name> <group_id>" : Set translation sharing group.
  (since version 0.2.8-RC3-community, unstable)

* "vm set_debug_level <instance_name> <level>" : Set the debug level
  (which is a number) for a VM. By default, no specific debug is enabled
  (level = 0).

* "vm set_ios <instance_name> <ios_file>" : Set the IOS image file to
  use. There is no default.

* "vm set_config <instance_name> <startup_file> [<private_file>]" : 
  Set the config files that are pushed to startup-config and 
  private-config in NVRAM when the instance is started.
  To keep existing data, use an empty string ('') for the filename.
  The optional <private_file> is an empty string by default.
  (supports <private_file> since version 0.2.10)

* "vm extract_config <instance_name>" : Get the contents of the config files 
  startup-config and private-config from NVRAM. The data of each file is 
  encoded in a Base64 string, surrounded by single quotes.
  (returns private-config since version 0.2.10)

* "vm push_config <instance_name> <startup_cfg> [<private_cfg>]" : 
  Push configuration to the config files startup-config and private-config 
  in NVRAM.
  The data is a Base64 encoded string, or '(keep)' to keep existing data.
  The optional <private_cfg> is '(keep)' by default.
  (supports <private_cfg> since version 0.2.11)

* "vm set_ram <instance_name> <ram_size>" : Set the RAM size, specified
  in Mbytes.

* "vm set_nvram <instance_name> <nvram_size>" : Set the NVRAM size,
  specified in Kbytes.

* "vm set_ram_mmap <instance_name> <0|1>" : Enable/Disable use
  of a mapped file to simulate router memory. By default, a mapped file
  is used. This is a bit slower, but requires less memory.

* "vm set_sparse_mem <instance_name> <0|1>" : Enable/disable use of 
  sparse memory. (since version 0.2.7-RC1)

* "vm suspend <instance_name>" : Suspend execution of the instance.

* "vm resume <instance_name>" : Resume execution of the instance.

* "vm set_clock_divisor <instance_name> <clock_div>" : Set the clock
  divisor value. The higher is the value, the faster is the clock in the
  virtual machine. The default is 4, but it is often required to adjust it.

* "vm set_blk_direct_jump <instance_name> <0|1>" : Enable/disable use 
  of block direct jump. (compatibility option, since version 0.2.7-RC2)

* "vm set_idle_pc <instance_name> <pc_value>" : Set the idle Pointer
  Counter (PC). You must determine it through the method explained in the
  main README file.

* "vm set_idle_pc_online <instace_name> <cpu_id> <pc_value>" : 
  Set the idle PC value when the CPU is online.
  (since version 0.2.6-RC2)

* "vm get_idle_pc_prop <instance_name> <cpu_id>" : 
  Get the idle PC proposals.
  Takes 1000 measurements and records up to 10 idle PC proposals.
  There is a 10ms wait between each measurement.
  (since version 0.2.6-RC2)

* "vm show_idle_pc_prop <instance_name> <cpu_id>" : 
  Dump the idle PC proposals. (since version 0.2.6-RC2)

* "vm set_idle_max <instance_name> <cpu_id> <idle_max>" : 
  Set CPU idle max value. (since version 0.2.6-RC2)

* "vm set_idle_sleep_time <instance_name> <cpu_id> <idle_sleep_time>" : 
  Set CPU idle sleep time value. (since version 0.2.6-RC2)

* "vm show_timer_drift <instance_name> <cpu_id>" : 
  Show info about potential timer drift.
  (since version 0.2.6-RC3)

* "vm set_ghost_file <instance_name> <ghost_ram_filename>" : 
  Set ghost RAM file. (since version 0.2.6-RC3, 
  needs an extra bogus argument before version 0.2.6-RC4)

* "vm set_ghost_status <instance_name> <ghost_status>" : 
  Set ghost RAM status. (since version 0.2.6-RC3, 
  needs an extra bogus argument before version 0.2.6-RC4)

* "vm set_exec_area <instance_name> <area_size>" : Set the exec area
  size. The exec area is a pool of host memory used to store pages
  translated by the JIT (they contain the native code corresponding to MIPS 
  code pages).

* "vm set_disk0 <instance_name> <value>" : Set size of PCMCIA ATA disk0.

* "vm set_disk1 <instance_name> <value>" : Set size of PCMCIA ATA disk1.

* "vm set_conf_reg <instance_name> <value>" : Set the config register
  value. The default is 0x2102. 

* "vm set_con_tcp_port <instance_name> <tcp_port>" : Set the TCP port
  to use for console. By default, no TCP port is chosen, meaning that you
  cannot get access to the console.

* "vm set_aux_tcp_port <instance_name> <tcp_port>" : Set the TCP port
  to use for AUX port. By default, no TCP port is chosen, meaning that you
  cannot get access to the AUX port.

* "vm cpu_info <instance_name> <cpu_id>" : Show info about the CPU identified
  by "cpu_id". The boot CPU (which is typically the only CPU) has ID 0.

* "vm cpu_usage <instance_name> <cpu_id>" : Show cpu usage of dynamips in 
  seconds. (experimental)
  The instance must exist, "cpu_id" is ignored.
  (since version 0.2.8-RC5-community)

* "vm send_con_msg <instance_name> <str> [<format>]" : 
  (since version 0.2.6-RC3) Send a message on the console.
  It only writes the bytes that fit in the console buffer.

  (since version 0.2.14)
  The optional argument <format> indicates the string format.
  On success it will report "X byte(s) written".

  String formats:
   * plain - plain string (default, old behavior)
   * base64 - base64 encoded string

* "vm send_aux_msg <instance_name> <str> [<format>]" : 
  (since version 0.2.6-RC3) Send a message on the AUX port.
  It only writes the bytes that fit in the aux buffer.

  (since version 0.2.14)
  The optional argument <format> indicates the string format.
  On success it will report "X byte(s) written".

  String formats:
   * plain - plain string (default, old behavior)
   * base64 - base64 encoded string

* "vm slot_bindings <instance_name>" : 
  Show slot bindings. (since version 0.2.8-RC1)

* "vm slot_nio_bindings <instance_name> <slot_id>" : 
  Show NIO bindings for the specified slot. (since version 0.2.8-RC1)

* "vm slot_add_binding <instance_name> <slot_id> <port_id> <dev_type>" : 
  Add a slot binding. (since version 0.2.8-RC1)

* "vm slot_remove_binding <instance_name> <slot_id> <port_id>" : 
  Remove a slot binding . (since version 0.2.8-RC1)

* "vm slot_add_nio_binding <instance_name> <slot_id> <port_id> <nio_name>" : 
  Add a NIO binding for a slot/port. (since version 0.2.8-RC1)

* "vm slot_remove_nio_binding <instance_name> <slot_id> <port_id>" : 
  Remove a NIO binding for a slot/port. (since version 0.2.8-RC1)

* "vm slot_enable_nio <instance_name> <slot_id> <port_id>" : 
  Enable NIO of the specified slot/port. (since version 0.2.8-RC1)

* "vm slot_disable_nio <instance_name> <slot_id> <port_id>" : 
  Disable NIO of the specified slot/port. (since version 0.2.8-RC1)

* "vm slot_oir_start <instance_name> <slot_id> <subslot_id>" : 
  OIR to start a slot/subslot. (since version 0.2.8-RC3-community)

* "vm slot_oir_stop <isntance_name> <slot_id> <subslot_id>" : 
  OIR to stop a slot/subslot. (since version 0.2.8-RC3-community)


Virtual Machine debugging module ("vm_debug")
=======================================

Available since version 0.2.6-RC1.

* "vm_debug show_cpu_regs <instance_name> <cpu_id>" : 
  Dump CPU registers to the console.

* "vm_debug show_cpu_mmu <instance_name> <cpu_id>" : 
  Dump CPU MMU info to the console. (since version 0.2.7-RC1)

* "vm_debug set_cpu_reg <instance_name> <cpu_id> <reg_id> <value>" : 
  Set the value of a CPU register.

* "vm_debug add_cpu_breakpoint <instance_name> <cpu_id> <address>" : 
  Add a breakpoint.

* "vm_debug remove_cpu_breakpoint <instance_name> <cpu_id> <address>" : 
  Remove a breakpoint.

* "vm_debug pmem_w32 <instance_name> <cpu_id> <address> <value>" : 
  Write a 32-bit memory word to physical memory.

* "vm_debug pmem_r32 <instance_name> <cpu_id> <address>" : 
  Read a 32-bit memory word from physical memory.

* "vm_debug pmem_w16 <instance_name> <cpu_id> <address> <value>" : 
  Write a 16-bit memory word to physical memory.

* "vm_debug pmem_r16 <instance_name> <cpu_id> <address>" : 
  Read a 16-bit memory word from physical memory.

* "vm_debug pmem_cfind <instance_name> <cpu_id> <bytes> [<first> [<last>]]" :
  Find a sequence of bytes in physical memory interval [first,last].
  The byte sequence is composed of hexadecimal characters and must have a length
  multiple of 2. The interval defaults to the complete memory space.
  Only the memory of cacheable devices (ram, rom, disks, ...) is searched.
  (since version 0.2.12)


Virtual Cisco 7200 instances module ("c7200")
==============================================

* "c7200 list" : List all existing Cisco 7200 instances.

* "c7200 set_npe <instance_name> <npe_name>" : Set the NPE model.
  For example: npe-100, npe-400, ... The default is "npe-400".

* "c7200 set_midplane <instance_name> <midplane_name>" : Set the midplane
  model, it can be either "std" or "vxr". The default is "vxr".

* "c7200 get_mac_addr <instance_name>" : Get the base MAC
  address of the router. By default, the address is automatically generated
  with this pattern : ca<instance_id>.<process_pid>.0000 (Cisco format).
  (since version 0.2.11)

* "c7200 set_mac_addr <instance_name> <mac_addr>" : Set the base MAC
  address of the router. The MAC address patern can be the Cisco format
  (e.g. ca01.1234.0000) or the standard format (e.g. ca:01:12:34:00:00).

* "c7200 set_system_id <instance_name> <system_id>" : 
  Set the system id. (since version 0.2.8-RC3-community)

* "c7200 set_temp_sensor <instance_name> <sensor_id> <temperature>" : 
  Set temperature for a DS1620 sensor.
  This can be used to simulate environmental problems like overheat.
  (since version 0.2.8-RC3-community)

* "c7200 set_power_supply <instance_name> <power_supply_id> <0|1>" : 
  Set power supply status.
  This can be used to simulate environmental problems like power loss.
  (since version 0.2.8-RC3-community)

* "c7200 show_hardware <instance_name>" : Display virtual hardware info 
  about the instance.


Virtual Cisco 3745 instances module ("c3745")
==============================================

Available since version 0.2.6-RC3.

* "c3745 list" : List all existing Cisco 3745 instances.

* "c3745 set_iomem <instance_name> <size>" : Set the I/O mem size.

* "c3745 get_mac_addr <instance_name> <mac_addr>" : Get the base MAC
  address of the router. By default, the address is automatically generated
  with this pattern : c4<instance_id>.<process_pid>.0000 (Cisco format).
  (since version 0.2.11)

* "c3745 set_mac_addr <instance_name> <mac_addr>" : Set the base MAC
  address of the router. The MAC address patern can be the Cisco format
  (e.g. c401.1234.0000) or the standard format (e.g. c4:01:12:34:00:00).

* "c3745 set_system_id <instance_name> <system_id>" : 
  Set the system id. (since version 0.2.8-RC3-community)

* "c3745 show_hardware <instance_name>" : Display virtual hardware info 
  about the instance.


Virtual Cisco 3725 instances module ("c3725")
==============================================

Available since version 0.2.6-RC3.

* "c3725 list" : List all existing Cisco 3725 instances.

* "c3725 set_iomem <instance_name> <size>" : Set the I/O mem size.

* "c3725 get_mac_addr <instance_name> <mac_addr>" : Get the base MAC
  address of the router. By default, the address is automatically generated
  with this pattern : c2<instance_id>.<process_pid>.0000 (Cisco format).
  (since version 0.2.11)

* "c3725 set_mac_addr <instance_name> <mac_addr>" : Set the base MAC
  address of the router. The MAC address patern can be the Cisco format
  (e.g. c201.1234.0000) or the standard format (e.g. c2:01:12:34:00:00).

* "c3725 set_system_id <instance_name> <system_id>" : 
  Set the system id. (since version 0.2.8-RC3-community)

* "c3725 show_hardware <instance_name>" : Display virtual hardware info 
  about the instance.


Virtual Cisco 3600 instances module ("c3600")
==============================================

* "c3600 list" : List all existing Cisco 3600 instances.

* "c3600 set_chassis <instance_name> <chassis_name>" : Set the chassis model.
  Possible values: 3620, 3640, 3660. The default is "3640".

* "c3600 set_iomem <instance_name> <size>" : Set the I/O mem size.

* "c3600 get_mac_addr <instance_name> <mac_addr>" : Get the base MAC
  address of the router. By default, the address is automatically generated
  with this pattern : cc<instance_id>.<process_pid>.0000 (Cisco format).
  (since version 0.2.11)

* "c3600 set_mac_addr <instance_name> <mac_addr>" : Set the base MAC
  address of the router. The MAC address patern can be the Cisco format
  (e.g. cc01.1234.0000) or the standard format (e.g. cc:01:12:34:00:00).

* "c3600 set_system_id <instance_name> <system_id>" : 
  Set the system id. (since version 0.2.8-RC3-community)

* "c3600 show_hardware <instance_name>" : Display virtual hardware info 
  about the instance.


Virtual Cisco 2691 instances module ("c2691")
==============================================

Available since version 0.2.6-RC3.

* "c2691 list" : List all existing Cisco 2691 instances.

* "c2691 set_iomem <instance_name> <size>" : Set the I/O mem size.

* "c2691 get_mac_addr <instance_name> <mac_addr>" : Get the base MAC
  address of the router. By default, the address is automatically generated
  with this pattern : c0<instance_id>.<process_pid>.0000 (Cisco format).
  (since version 0.2.11)

* "c2691 set_mac_addr <instance_name> <mac_addr>" : Set the base MAC
  address of the router. The MAC address patern can be the Cisco format
  (e.g. c001.1234.0000) or the standard format (e.g. c0:01:12:34:00:00).

* "c2691 set_system_id <instance_name> <system_id>" : 
  Set the system id. (since version 0.2.11)

* "c2691 show_hardware <instance_name>" : Display virtual hardware info 
  about the instance.


Virtual Cisco 2600 instances module ("c2600")
==============================================

Available since version 0.2.7-RC1.

* "c2600 list" : List all existing Cisco 2600 instances.

* "c2600 set_chassis <instance_name> <chassis_name>" : Set the chassis model.
  Possible values: 2610, 2611, 2620, 2621, 2610XM, 2611XM, 2620XM, 
  2621XM, 2650XM, 2651XM. The default is "2610".

* "c2600 set_iomem <instance_name> <size>" : Set the I/O mem size.

* "c2600 get_mac_addr <instance_name> <mac_addr>" : Get the base MAC
  address of the router. By default, the address is automatically generated
  with this pattern : c8<instance_id>.<process_pid>.0000 (Cisco format).
  (since version 0.2.11)

* "c2600 set_mac_addr <instance_name> <mac_addr>" : Set the base MAC
  address of the router. The MAC address patern can be the Cisco format
  (e.g. c801.1234.0000) or the standard format (e.g. c8:01:12:34:00:00).

* "c2600 set_system_id <instance_name> <system_id>" : 
  Set the system id. (since version 0.2.8-RC3-community)

* "c2600 show_hardware <instance_name>" : Display virtual hardware info 
  about the instance.


Virtual Cisco 1700 instances module ("c1700")
==============================================

Available since version 0.2.8-RC1.

* "c1700 list" : List all existing Cisco 1700 instances.

* "c1700 set_chassis <instance_name> <chassis_name>" : Set the chassis model.
  Possible values: 1710, 1720, 1721, 1750, 1751, 1760. The default is "1720".

* "c1700 set_iomem <instance_name> <size>" : Set the I/O mem size.

* "c1700 get_mac_addr <instance_name> <mac_addr>" : Get the base MAC
  address of the router. By default, the address is automatically generated
  with this pattern : d0<instance_id>.<process_pid>.0000 (Cisco format).
  (since version 0.2.11)

* "c1700 set_mac_addr <instance_name> <mac_addr>" : Set the base MAC
  address of the router. The MAC address patern can be the Cisco format
  (e.g. d001.1234.0000) or the standard format (e.g. d0:01:12:34:00:00).

* "c1700 set_system_id <instance_name> <system_id>" : 
  Set the system id. (since version 0.2.8-RC3-community)

* "c1700 show_hardware <instance_name>" : Display virtual hardware info 
  about the instance.


Network Input/Output (NIO) module ("nio")
==========================================

* "nio list" : List all exiting NIOs.

* "nio create_udp <nio_name> <local_port> <remote_host> <remote_port>" :
  Create an UDP NIO with the specified parameters.

* "nio create_udp_auto <nio_name> <local_addr> <local_port_start> <local_port_end>" :
  Create an auto UDP NIO.
  (since version 0.2.8-RC3-community)

* "nio connect_udp_auto <nio_name> <remote_host> <remote_port>" : 
  Connect an UDP Auto NIO to a remote host/port.
  (since version 0.2.8-RC3-community)

* "nio create_unix <nio_name> <local_file> <remote_file>" : 
  Create an UNIX NIO with the specified parameters.

* "nio create_vde <nio_name> <control_file> <local_file>" : 
  Create a VDE NIO with the specified parameters. VDE stands for "Virtual
  Distributed Ethernet" and is compatible with UML (User-Mode-Linux) switch.

* "nio create_tap <nio_name> <tap_device>" : Create a TAP NIO. TAP devices
  are supported only on Linux and FreeBSD and require root access.

* "nio create_gen_eth <nio_name> <eth_device>" : Create a generic ethernet
  NIO, using PCAP (0.9.4 and greater). It requires root access.
  Available if compiled with GEN_ETH.

* "nio create_linux_eth <nio_name> <eth_device>" : Create a Linux ethernet
  NIO. It requires root access and is supported only on Linux platforms.
  Available if compiled with LINUX_ETH.

* "nio create_null <nio_name>" : Create a Null NIO.

* "nio create_fifo <nio_name>" : Create a FIFO NIO.

* "nio crossconnect_fifo <nio_name> <nio_name>" :
  Establish a cross-connect between 2 FIFO NIO.

* "nio rename <nio_name> <new_name>" : Rename a NIO.
  (since version 0.2.11)

* "nio delete <nio_name>" : Delete the specified NIO. The NIO can be deleted
  only when it is not anymore in use by another object.

* "nio set_debug <nio_name> <debug>" : Enable/Disable debugging for the
  specified NIO. When debugging is enabled, received and emitted packets are
  displayed at screen. It is mainly used to debug interface drivers.

* "nio bind_filter <nio_name> <direction> <filter_name>" :
  Bind a packet filter.
  Direction is 0 for receiving, 1 for sending, 2 for both.
  Filter "freq_drop" drops packets. Filter "capture" captures 
  packets and is only available if compiled with GEN_ETH.

* "nio unbind_filter <nio_name> <direction>" : Unbind a packet filter.

* "nio setup_filter <nio_name> <direction> [<a3> [...<a10>]]" : 
  Setup a packet filter for a given NIO. The arguments are passed on 
  to the setup function of the filter.
   Filter "freq_drop" has 1 argument "<frequency>". It will drop 
  everything with a -1 frequency, drop every Nth packet with a 
  positive frequency, or drop nothing.
   Filter "capture" has 2 arguments "<link_type_name> <output_file>". 
  It will capture packets to the target output file. The link type 
  name is a case-insensitive DLT_ name from the pcap library 
  constants with the DLT_ part removed.

* "nio get_stats <nio_name>" : Get statistics of a NIO.
  (since version 0.2.8-RC3-community)

* "nio reset_stats <nio_name>" : Reset statistics of a NIO.
  (since version 0.2.8-RC3-community)

* "nio set_bandwidth <nio_name> <bandwidth>" : Set bandwidth constraint.
  (since version 0.2.8-RC3-community)


NIO bridge module ("nio_bridge")
=================================

* "nio_bridge list" : List all NIO bridges.

* "nio_bridge create <bridge_name>" : Create a NIO bridge. A NIO bridge
  acts as a shared media (a kind of hub).

* "nio_bridge rename <bridge_name> <new_name>" : Rename a NIO bridge.
  (since version 0.2.11)

* "nio_bridge delete <bridge_name>" : Delete a NIO bridge.

* "nio_bridge add_nio <bridge_name> <nio_name>" : Add a NIO as new port
  in a NIO bridge. The NIO must be created through the "nio" module.

* "nio_bridge remove_nio <bridge_name> <nio_name>" : Remove the specified
  NIO as member of the NIO bridge.


Virtual Ethernet switch module ("ethsw")
==================================

* "ethsw list" : List all Ethernet switches.

* "ethsw create <switch_name>" : Create a new Ethernet switch.

* "ethsw rename <switch_name> <new_name>" : Rename an Ethernet switch.
  (since version 0.2.11)

* "ethsw delete <switch_name>" : Delete the specified Ethernet switch.

* "ethsw add_nio <switch_name> <nio_name>" : Add a NIO as new port in an
  Ethernet switch. The NIO must be created through the "nio" module.

* "ethsw remove_nio <switch_name> <nio_name>" : Remove the specified NIO
  as member of the Ethernet switch.

* "ethsw set_access_port <switch_name> <nio_name> <vlan_id>" : 
  Set the specified port as an ACCESS port in VLAN <vlan_id>.

* "ethsw set_dot1q_port <switch_name> <nio_name> <native_vlan>" :
  Set the specified port as a 802.1Q trunk port, with native 
  VLAN <native_vlan>.

* "ethsw set_qinq_port <switch_name> <nio_name> <outer_vlan>" :
  Set the specified port as a trunk (QinQ) port.
  (since version 0.2.3-RC3-community)

* "ethsw clear_mac_addr_table <switch_name>" : Clear the MAC address table.

* "ethsw show_mac_addr_table <switch_name>" : Show the MAC address table
  (output format: Ethernet address, VLAN, NIO)


Virtual ATM switch module ("atmsw")
=============================

* "atmsw list" : List all ATM switches.

* "atmsw create <switch_name>" : Create a new ATM switch.

* "atmsw rename <switch_name> <new_name>" : Rename an ATM switch.
  (since version 0.2.11)

* "atmsw delete <switch_name>" : Delete the specified ATM switch.

* "atmsw create_vpc <switch_name> <input_nio> <input_vpi> 
  <output_nio> <output_vpi>" : 
  Create a new Virtual Path connection (unidirectional).

* "atmsw delete_vpc <switch_name> <input_nio> <input_vpi> 
  <output_nio> <output_vpi>" : 
  Delete a Virtual Path connection (unidirectional).

* "atmsw create_vcc <switch_name> <input_nio> <input_vpi> <input_vci>
  <output_nio> <output_vpi> <output_vci>" : 
  Create a new Virtual Channel connection (unidirectional).

* "atmsw delete_vcc <switch_name> <input_nio> <input_vpi> <input_vci>
  <output_nio> <output_vpi> <output_vci>" : 
  Delete a Virtual Channel connection (unidirectional).


Virtual ATM bridge module ("atm_bridge")
==================================

Available since version 0.2.8-RC2.

* "atm_bridge list" : List all ATM bridges.

* "atm_bridge create <bridge_name>" : Create a new ATM bridge.

* "atm_bridge rename <bridge_name> <new_name>" : Rename an ATM bridge.
  (since version 0.2.11)

* "atm_bridge delete <bridge_name>" : Delete an ATM bridge.

* "atm_bridge configure <bridge_name> <eth_nio> <atm_nio> <vpi> <vci>" : 
  Configure an ATM bridge.

* "atm_bridge unconfigure <bridge_name>" : Unconfigure an ATM bridge.


Virtual Frame-Relay switch module ("frsw")
====================================

* "frsw list" : List all Frame-Relay switches.

* "frsw create <switch_name>" : Create a new Frame-Relay switch.

* "frsw rename <switch_name> <new_name>" : Rename a Frame-Relay switch.
  (since version 0.2.11)

* "frsw delete <switch_name>" : Delete the specified Frame-Relay switch.

* "frsw create_vc <switch_name> <input_nio> <input_dlci> 
  <output_nio> <output_dlci>" : 
  Create a new Virtual Circuit connection (unidirectional).

* "frsw delete_vc <switch_name> <input_nio> <input_dlci> 
  <output_nio> <output_dlci>" : 
  Delete a Virtual Circuit connection (unidirectional).


Object store module ("object_store")
====================================

Available since version 0.2.8-RC2.

* "object_store write <object_name> <data>" : 
  Write an object, data provided in base64 encoding.

* "object_store read <object_name>" : 
  Read an object and return data in base64 encoding.

* "object_store rename <object_name> <new_name>" : Rename an object.
  (since version 0.2.11)

* "object_store delete <object_name>" : 
  Delete an object from the store.

* "object_store delete_all" : 
  Delete all objects from the store

* "object_store list" : 
  Object list.
